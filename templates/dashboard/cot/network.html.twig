{% extends '@EasyAdmin/page/content.html.twig' %}

{% block title %}Monitor de red{% endblock %}

{% block head_stylesheets %}
    {{ parent() }}
    <link rel="stylesheet" href="{{ asset('gojs/ZoomSlider.css') }}">
    <style>
        #myDiagramDiv {
            background-color: #ffffff;
            width: 100%;
            height: 900px;
            border: 1px solid #d4eaff;
            position: relative;
        }
        /* Ajuste para el ZoomSlider */
        .zoomSlider {
            margin-top: 10px !important;
            margin-right: 10px !important;
        }
        .controls-panel {
            margin-bottom: 10px;
            padding: 10px;
            background: #f5f5f5;
            border-radius: 5px;
        }
        .controls-panel button {
            margin-right: 5px;
        }
    </style>
{% endblock %}

{% block head_javascript %}
    {{ parent() }}
    <script src="{{ asset('gojs/go.js') }}"></script>
    <script src="{{ asset('gojs/ZoomSlider.js') }}"></script>
{% endblock %}

{% block main %}
    <div class="content-panel">
        <div class="content-panel-body">
            <h2>DIAGRAMA DE RED COSTANERA NORTE</h2>

            <!-- Panel de controles -->
            <div class="controls-panel">
                <button id="SaveButton" class="btn btn-sm btn-primary" onclick="save()">
                    <i class="fas fa-save"></i> Guardar
                </button>
                <button class="btn btn-sm btn-info" onclick="load()">
                    <i class="fas fa-sync"></i> Recargar
                </button>
                <button class="btn btn-sm btn-warning" onclick="addPort('top')">
                    <i class="fas fa-plus"></i> Agregar Puerto Superior
                </button>
                <button class="btn btn-sm btn-warning" onclick="addPort('bottom')">
                    <i class="fas fa-plus"></i> Agregar Puerto Inferior
                </button>
                <button class="btn btn-sm btn-warning" onclick="addPort('left')">
                    <i class="fas fa-plus"></i> Agregar Puerto Izquierdo
                </button>
                <button class="btn btn-sm btn-warning" onclick="addPort('right')">
                    <i class="fas fa-plus"></i> Agregar Puerto Derecho
                </button>
            </div>

            <!-- Canvas para GoJS -->
            <div id="myDiagramDiv" style="position: relative;"></div>

            <!-- Textarea para guardar/editar modelo JSON -->
            <div style="margin-top: 20px;">
                <h4>Modelo JSON (Debug)</h4>
                <textarea id="mySavedModel" style="width: 100%; height: 200px; font-family: monospace; font-size: 12px;">{{ json_graphic_template|raw }}</textarea>
            </div>
        </div>
    </div>

    <script>
        var myDiagram;
        var zoomSlider;

        function init() {
            var $ = go.GraphObject.make;

            myDiagram = $(go.Diagram, "myDiagramDiv", {
                "undoManager.isEnabled": true,
                "animationManager.isEnabled": false,
                "grid.visible": false,
                "grid.gridCellSize": new go.Size(5, 5),
                isReadOnly: false,
                initialContentAlignment: go.Spot.Center,
                initialAutoScale: go.Diagram.UniformToFill
            });

            // Listener para modificaciones
            myDiagram.addDiagramListener("Modified", function(e) {
                var button = document.getElementById("SaveButton");
                if (button) button.disabled = !myDiagram.isModified;
                var idx = document.title.indexOf("*");
                if (myDiagram.isModified) {
                    if (idx < 0) document.title += "*";
                } else {
                    if (idx >= 0) document.title = document.title.substr(0, idx);
                }
            });

            // Función para crear botones de menú contextual
            function makeButton(text, action, visiblePredicate) {
                return $("ContextMenuButton",
                    $(go.TextBlock, text),
                    { click: action },
                    visiblePredicate ? new go.Binding("visible", "", function(o, e) {
                        return o.diagram ? visiblePredicate(o, e) : false;
                    }).ofObject() : {});
            }

            // Menú contextual para nodos
            var nodeMenu = $("ContextMenu",
                makeButton("Copiar", function(e, obj) {
                    e.diagram.commandHandler.copySelection();
                }),
                makeButton("Eliminar", function(e, obj) {
                    e.diagram.commandHandler.deleteSelection();
                }),
                $(go.Shape, "LineH", { strokeWidth: 2, height: 1, stretch: go.GraphObject.Horizontal }),
                makeButton("Add top port", function(e, obj) { addPort("top"); }),
                makeButton("Add left port", function(e, obj) { addPort("left"); }),
                makeButton("Add right port", function(e, obj) { addPort("right"); }),
                makeButton("Add bottom port", function(e, obj) { addPort("bottom"); })
            );

            var portSize = new go.Size(14, 13);

            // Menú contextual para puertos
            var portMenu = $("ContextMenu",
                makeButton("Intercambiar orden", function(e, obj) {
                    swapOrder(obj.part.adornedObject);
                }),
                makeButton("Eliminar puerto", function(e, obj) {
                    removePort(obj.part.adornedObject);
                }),
                makeButton("Cambiar color", function(e, obj) {
                    changeColor(obj.part.adornedObject);
                }),
                makeButton("Eliminar puertos de este costado", function(e, obj) {
                    removeAll(obj.part.adornedObject);
                })
            );

            // Template principal para nodos
            myDiagram.nodeTemplate = $(go.Node, "Table", {
                    locationObjectName: "BODY",
                    locationSpot: go.Spot.Center,
                    selectionObjectName: "BODY",
                    contextMenu: nodeMenu,
                    resizable: true,
                    resizeObjectName: "BODY"
                },
                new go.Binding("location", "loc", go.Point.parse).makeTwoWay(go.Point.stringify),

                // Cuerpo del nodo
                $(go.Panel, "Auto", {
                        row: 1, column: 1, name: "BODY",
                        stretch: go.GraphObject.Fill
                    },
                    $(go.Shape, "Rectangle", {
                            fill: "#AC193D",
                            stroke: null,
                            strokeWidth: 0,
                            minSize: new go.Size(56, 56)
                        },
                        new go.Binding("desiredSize", "size", go.Size.parse).makeTwoWay(go.Size.stringify),
                        new go.Binding("fill", "color")
                    ),
                    $(go.TextBlock, {
                            margin: 10,
                            textAlign: "center",
                            font: "14px Segoe UI,sans-serif",
                            stroke: "white",
                            editable: true
                        },
                        new go.Binding("text", "name").makeTwoWay()
                    )
                ),

                // Panel izquierdo de puertos
                $(go.Panel, "Vertical",
                    new go.Binding("itemArray", "leftArray"), {
                        row: 1, column: 0,
                        itemTemplate: $(go.Panel, {
                                _side: "left",
                                fromSpot: go.Spot.Left, toSpot: go.Spot.Left,
                                fromLinkable: true, toLinkable: true, cursor: "pointer",
                                contextMenu: portMenu
                            },
                            new go.Binding("portId", "portId"),
                            $(go.Shape, "Rectangle", {
                                    stroke: null, strokeWidth: 0,
                                    desiredSize: portSize,
                                    margin: new go.Margin(1, 0)
                                },
                                new go.Binding("fill", "portColor")
                            ),
                            $(go.TextBlock, "", {
                                    margin: 0, textAlign: "center",
                                    font: "9pt helvetica, arial, sans-serif",
                                    stroke: "white", editable: true
                                },
                                new go.Binding("text", "text").makeTwoWay()
                            )
                        )
                    }
                ),

                // Panel superior de puertos
                $(go.Panel, "Horizontal",
                    new go.Binding("itemArray", "topArray"), {
                        row: 0, column: 1,
                        itemTemplate: $(go.Panel, {
                                _side: "top",
                                fromSpot: go.Spot.Top, toSpot: go.Spot.Top,
                                fromLinkable: true, toLinkable: true, cursor: "pointer",
                                contextMenu: portMenu
                            },
                            new go.Binding("portId", "portId"),
                            $(go.Shape, "Rectangle", {
                                    stroke: null, strokeWidth: 0,
                                    desiredSize: portSize,
                                    margin: new go.Margin(0, 1)
                                },
                                new go.Binding("fill", "portColor")
                            ),
                            $(go.TextBlock, "", {
                                    margin: 0, textAlign: "center",
                                    font: "9pt helvetica, arial, sans-serif",
                                    stroke: "white", editable: true
                                },
                                new go.Binding("text", "text").makeTwoWay()
                            )
                        )
                    }
                ),

                // Panel derecho de puertos
                $(go.Panel, "Vertical",
                    new go.Binding("itemArray", "rightArray"), {
                        row: 1, column: 2,
                        itemTemplate: $(go.Panel, {
                                _side: "right",
                                fromSpot: go.Spot.Right, toSpot: go.Spot.Right,
                                fromLinkable: true, toLinkable: true, cursor: "pointer",
                                contextMenu: portMenu
                            },
                            new go.Binding("portId", "portId"),
                            $(go.Shape, "Rectangle", {
                                    stroke: null, strokeWidth: 0,
                                    desiredSize: portSize,
                                    margin: new go.Margin(1, 0)
                                },
                                new go.Binding("fill", "portColor")
                            ),
                            $(go.TextBlock, "", {
                                    margin: 0, textAlign: "center",
                                    font: "9pt helvetica, arial, sans-serif",
                                    stroke: "white", editable: true
                                },
                                new go.Binding("text", "text").makeTwoWay()
                            )
                        )
                    }
                ),

                // Panel inferior de puertos
                $(go.Panel, "Horizontal",
                    new go.Binding("itemArray", "bottomArray"), {
                        row: 2, column: 1,
                        itemTemplate: $(go.Panel, {
                                _side: "bottom",
                                fromSpot: go.Spot.Bottom, toSpot: go.Spot.Bottom,
                                fromLinkable: true, toLinkable: true, cursor: "pointer",
                                contextMenu: portMenu
                            },
                            new go.Binding("portId", "portId"),
                            $(go.Shape, "Rectangle", {
                                    stroke: null, strokeWidth: 0,
                                    desiredSize: portSize,
                                    margin: new go.Margin(0, 1)
                                },
                                new go.Binding("fill", "portColor")
                            ),
                            $(go.TextBlock, "", {
                                    margin: 0, textAlign: "center",
                                    font: "9pt helvetica, arial, sans-serif",
                                    stroke: "white", editable: true
                                },
                                new go.Binding("text", "text").makeTwoWay()
                            )
                        )
                    }
                )
            );

            // Template para comentarios
            myDiagram.nodeTemplateMap.add("Comment",
                $(go.Node, "Auto",
                    new go.Binding("location", "loc", go.Point.parse).makeTwoWay(go.Point.stringify),
                    { locationSpot: go.Spot.Center },
                    $(go.Shape, "Rectangle", { fill: "#ffffff26", strokeWidth: 0 }),
                    $(go.TextBlock, {
                            margin: 5,
                            maxSize: new go.Size(200, NaN),
                            wrap: go.TextBlock.WrapFit,
                            textAlign: "center",
                            editable: true,
                            font: "bold 12pt Helvetica, Arial, sans-serif",
                            stroke: '#454545'
                        },
                        new go.Binding("text").makeTwoWay()
                    )
                )
            );

            // Template para títulos
            myDiagram.nodeTemplateMap.add("Title",
                $(go.Node, "Auto",
                    new go.Binding("location", "loc", go.Point.parse).makeTwoWay(go.Point.stringify),
                    { locationSpot: go.Spot.Center },
                    $(go.Shape, "Rectangle", { fill: "#ffffff26", strokeWidth: 0 }),
                    $(go.TextBlock, {
                            margin: 5,
                            wrap: go.TextBlock.WrapFit,
                            textAlign: "center",
                            editable: true,
                            font: "bold 16pt Helvetica, Arial, sans-serif",
                            stroke: '#000d33'
                        },
                        new go.Binding("text").makeTwoWay()
                    )
                )
            );

            // Template para enlaces
            myDiagram.linkTemplate = $(go.Link, {
                    routing: go.Link.AvoidsNodes,
                    corner: 4,
                    curve: go.Link.JumpGap,
                    reshapable: true,
                    resegmentable: true,
                    relinkableFrom: true,
                    relinkableTo: true
                },
                new go.Binding("points").makeTwoWay(),
                $(go.Shape, { stroke: "#2F4F4F", strokeWidth: 2 },
                    new go.Binding("stroke", "color"),
                    new go.Binding("strokeWidth", "width"),
                    new go.Binding("strokeDashArray", "dash")
                ),
                $(go.TextBlock, "transition", {
                        textAlign: "center",
                        font: "10pt helvetica, arial, sans-serif",
                        stroke: "black",
                        margin: 4,
                        editable: true
                    },
                    new go.Binding("text", "text").makeTwoWay()
                )
            );

            // Soporte para doble-click en el fondo para agregar nodos
            myDiagram.toolManager.clickCreatingTool.archetypeNodeData = {
                name: "Nodo",
                leftArray: [],
                rightArray: [],
                topArray: [],
                bottomArray: []
            };

            // Menú contextual del diagrama
            myDiagram.contextMenu = $("ContextMenu",
                makeButton("Pegar", function(e, obj) {
                    e.diagram.commandHandler.pasteSelection(e.diagram.lastInput.documentPoint);
                }, function(o) {
                    return o.diagram.commandHandler.canPasteSelection();
                }),
                makeButton("Deshacer", function(e, obj) {
                    e.diagram.commandHandler.undo();
                }, function(o) {
                    return o.diagram.commandHandler.canUndo();
                }),
                makeButton("Rehacer", function(e, obj) {
                    e.diagram.commandHandler.redo();
                }, function(o) {
                    return o.diagram.commandHandler.canRedo();
                })
            );

            // Zoom slider
            zoomSlider = new ZoomSlider(myDiagram, {
                alignment: go.Spot.TopRight,
                alignmentFocus: go.Spot.TopRight,
                size: 150,
                buttonSize: 30,
                orientation: 'vertical',
                margin: 20  // Agregar margen para que no se superponga
            });

            // Cargar el diagrama
            load();
        }

        // Funciones para manejo de puertos
        function addPort(side) {
            myDiagram.startTransaction("addPort");
            myDiagram.selection.each(function(node) {
                if (!(node instanceof go.Node)) return;
                var i = 0;
                while (node.findPort(side + i.toString()) !== node) i++;
                var name = side + i.toString();
                var arr = node.data[side + "Array"];
                if (arr) {
                    var newportdata = {
                        portId: name,
                        portColor: go.Brush.randomColor(),
                        text: ""
                    };
                    myDiagram.model.insertArrayItem(arr, -1, newportdata);
                }
            });
            myDiagram.commitTransaction("addPort");
        }

        function swapOrder(port) {
            var arr = port.panel.itemArray;
            if (arr.length >= 2) {
                for (var i = 0; i < arr.length; i++) {
                    if (arr[i].portId === port.portId) {
                        myDiagram.startTransaction("swap ports");
                        if (i >= arr.length - 1) i--;
                        var newarr = arr.slice(0);
                        newarr[i] = arr[i + 1];
                        newarr[i + 1] = arr[i];
                        myDiagram.model.setDataProperty(port.part.data, port._side + "Array", newarr);
                        myDiagram.commitTransaction("swap ports");
                        break;
                    }
                }
            }
        }

        function removePort(port) {
            myDiagram.startTransaction("removePort");
            var pid = port.portId;
            var arr = port.panel.itemArray;
            for (var i = 0; i < arr.length; i++) {
                if (arr[i].portId === pid) {
                    myDiagram.model.removeArrayItem(arr, i);
                    break;
                }
            }
            myDiagram.commitTransaction("removePort");
        }

        function removeAll(port) {
            myDiagram.startTransaction("removePorts");
            var nodedata = port.part.data;
            var side = port._side;
            myDiagram.model.setDataProperty(nodedata, side + "Array", []);
            myDiagram.commitTransaction("removePorts");
        }

        function changeColor(port) {
            myDiagram.startTransaction("colorPort");
            var data = port.data;
            myDiagram.model.setDataProperty(data, "portColor", go.Brush.randomColor());
            myDiagram.commitTransaction("colorPort");
        }

        // Guardar y cargar
        function save() {
            document.getElementById("mySavedModel").value = myDiagram.model.toJson();
            myDiagram.isModified = false;
        }

        function load() {
            var modelText = document.getElementById("mySavedModel").value;
            if (modelText) {
                myDiagram.model = go.Model.fromJson(modelText);
            }
        }

        // Inicializar cuando el DOM esté listo
        document.addEventListener('DOMContentLoaded', init);
    </script>
{% endblock %}